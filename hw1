#一.简答题

1.软件工程的定义

#IEEE：在软件工程术语汇编中的定义：软件工程是：1.将系统化的、严格约束的、可量化的方法应用于软件的开发、运行和维护，即将工程化应用于软件；2.在1中所述方法的研究

2.解释导致 software crisis 本质原因、表现，述说克服软件危机的方法

    软件危机 (software crisis) 是计算科学早期使用的术语，用于描述在所需时间内编写有用且高效的计算机程序的困难性。

软件危机出现的本质原因是：

    计算机能力的迅速提高和无法解决的问题的复杂性。随着软件复杂性的提高，由于现有方法不足，许多软件问题涌现了出来。
通俗点说，没有计算机时，根本没有编程上的问题；有了一些没那么强的计算机时，编程的问题出现了，但问题不大；现在计算机越来越强大，编程也就越来越复杂，也随之成为一个庞大而复杂的问题。

表现：

  项目运行超预算

  项目运行超时

  软件效率很低

  软件质量很差

  软件通常不符合需求

  项目难以管理，代码难以维护

  软件从未交付过


克服软件危机的方法

    针对软件危机的本质原因，当务之急就是构建软件生产的最佳实践与知识体系，发展更好的软件开发和管理方法，比如面向过程编程(PP)、面向对象
编程(OOP)、面向切面编程(AOP)等都是过去十年来提出的用来改善软件质量管理的方法。但软件由于其自身的复杂性，很容易被这样那样的不可预测的问
题所侵袭，所以只能说尽可能地避免或者减少其问题，而很难完全解决软件危机。

3.软件生命周期

    软件开发过程是将软件开发工作划分为不同阶段以改进设计，产品管理和项目管理的过程。

4.SWEBoK 的 15 个知识域

    software requirements：软件需求，指软件产品的需求和约束，要对软件需求进行引出、商议、分析、规范和确认，保证产品的完整。

    software design：软件设计，指分析软件需求后，对软件制品或系统的结构、组件、接口以及其他特性做出设计和定义。

    software constuction：软件开发，指通过详细的设计、编码、单元测试、集成测试、调试以及验证的过程来完成开发的过程。

    software testing：软件测试，指通过检测行为发现当前制品的缺陷并进行改进，从而提高软件质量的行为。

    software maintenance：软件维护，软件维护包括增强现有的能力，使软件适应新的和修改过的操作环境，以及纠正缺陷。这些类别被称为完善的、适应性的和纠正性的软件维护。软件维护知识领域包括软件维护的基础知识（维护的性质和需要、维护的类别、维护成本）；软件维护中的关键问题（技术问题、管理问题、维护成本估算、软件维护的测量）；维护过程；软件维护技术（程序理解、重新设计、逆向工程、重构、软件退役）；灾难恢复技术和软件维护工具。

    software configuration management：软件配置管理，识别系统配置，从而控制配置的更改，在整个软件生命周期中保持其配置的完整性和可追溯性，包括软件配置识别、控制、状态核算、审核、软件发布管理和交付、软件配置管理工具。

    software engineering management：软件工程管理，软件工程管理包括计划、协调、测量、报告和控制项目或程序，以确保软件的开发和维护是系统的、有纪律的和量化的。软件工程管理KA包括启动和范围定义（确定和协商需求、可行性分析以及需求的评审和修订）；软件项目规划（过程规划、工作量、成本和进度估计、资源分配、风险分析、质量规划）；软件项目E投资（测量、报告和控制；采购和供应商合同管理）；产品验收；项目绩效的审查和分析；项目结束；以及软件管理工具。

    sofeware engineering process：软件工程过程，指对软件周期过程的定义、实现、评估、测量、管理和改进，包括过程（软件生命周期模型和过程、过程定义注释、过程适应和过程自动化）、方法（过程测量、产品测量、测量技术和测量结果质量）、工具三个方面。

    software engineering models and methods：软件工程模型和方法，指在不同生命周期阶段的方法，如建模、模型类型、分析、软件开发方法。

    software quality：软件质量，指一种软件生命周期问题，包括软件质量基础、软件质量管理过程以及实用性考量。

    software engineering professional practice：软件工程专业实践，指软件工程师以专业、负责和到的的方式时间软件工程所必须具备的知识、技能和态度，包括专业性、道德规范、群体动力学、沟通技巧。

    software engineering economics：软件工程经济学，指在业务环境中作出决策，以使技术决策与组织的业务目标保持一致，包括软件工程经济学基础、非盈利决策、估算经济风险和不确定性、多属性决策。

    computing foundations：计算机基础，指软件工程实践必需的计算机能力，包括问题解决技术、抽象、算法和复杂性、编程基础、并行和分布式计算基础、计算机组织、操作系统以及网络通信。

    mathematical foundations：数学基础，指软件工程实践必需的数学能力背景，包括集合、关系和函数、基本命题和谓词逻辑、证明技术、图和树、离散概率、语法和有限状态机、数论。

    engineering foundations：工程基础，指软件工程实践必需的工程背景，包括经验方法和实验技术、统计分析、测量和度量、工程设计、模拟和
建模、根本原因分析。

5.CMMI 的五个级别

Level 1 - Initail：无序，自发生产模型

Level 2 - Managed：项目流程特征，反应性

Level 3 - Defined：组织标准过程，可视性

Level 4 - Quantitatively Managed：测量和控制，定量的

Level 5 - Optimizing：优化和改进

6.CMMI 简述

    CMMI（Capability Maturity Model for Software / CMM），软件能力成熟度模型，是衡量企业能力成熟与否的模型工具。它一共分为五个层级，分别是初始级、可管理级、已定义级、量化管理级和优化管理级。能力成熟度模型集成的目的是帮助软件企业对软件工程过程进行管理和改进，增强开发与改进能力，从而能按时地、不超预算地开发出高质量的软件。而与此同时，CMMI的层级划分也为企业的未来发展及自身完善明确了方向，根据能力成熟度模型的层级标准，各个企业可以对自身的软件工程流程做出更加严格专业的规范，从而提高其自身能力和竞争力。 
